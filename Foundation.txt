import Foundation
class TipCalculatorModel{
var total:Double
var taxPct:Double
var subtotal:Double{
	get{
		return total/(taxPct+1)
	
  }
}
init(total:Double,taxPct:Double){
	self.total = total
	self.taxPct = taxPct
}

func calcTipWithTipPct(tipPct:Double)->Double{
	return subtotal*tipPct
}

func returnPossibleTips()->[Int:Double]{
	let possibleTipsInferred = [0.15,0.18,0.20]
	let possibleTipsExplicit:[Double] = [0.15,0.18,0.20]
	
	var retval = [Int:Double]()
	for possibleTips in possibleTipsInferred{
		let intPct = Int(possibleTips*100)
		retval[intPct] = calcTipWithTipPct(possibleTips)
	}
	return retval
   }
}

#import<UIKit/UIKit.h>
@interface ViewController:UIViewController
@end



//1
import UIKit
//2
class ViewController:UIViewController{
	
	//3
	override func viewDidLoad(){
	@IBOutlet var totalTextField : UITextField!
	@IBOutlet var taxPctSlider : UISlider!
	@IBOutlet var taxPctLabel : UILabel!
	@IBOutlet var resultsTextView : UITextView!

	  super.viewDidLoad()
	let tipCalc = TipCalculatorModel(total:33.25, taxPct:0.06)
	  refreshUI(){
		//1
		totalTextField.text = String(format: "%0.2f", tipCalc.total)
		//2
		taxPctSlider.text = Float(tipCalc.taxPct)*100.0
		//3
		taxPctLabel.text = "Tax Percentage(\(Int(taxPctSlider.value))%)"
		//4
		resultsTextView.text = "" 	    

	  }
	}
	//4
	override func didReceiveMemoryWarning(){
	  super.didReceiveMemoryWarning()
	}
}

@IBAction func calculateTapped(sender : AnyObject){
	//1
	tipCalc.total = Double((totalTextField.text as NSString)doubleValue)
	//2
	let possibleTips = tipCalc.returnPossibleTips()
	var results = ""
	//3
	for (tipPct, tipValue) in possibleTips{
	//4
	 results += "\(tipPct)%: \(tipValue)\n"
	}
	//5
	resultsTextView.text = results
}
@IBAction func taxPercentageChanged(sender : AnyObject){
	tipCalc.taxPct = Double(taxPctSlider.value)/100.0
	refreshUI()
}
@IBAction func viewTapped(sender : AnyObject){
	totalTextField.resignFirstResponder()
}


var keys = Array(possibleTips.keys)
sort(&keys)
for tipPct in keys{
	let tipValue = possibleTips[tipPct]!
	let prettyTipValue = String(format:"%.2f", tipValue)
	results += "\(tipPct)%: \(prettyTipValue)\n"
}